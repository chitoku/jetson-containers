name: nerfstudio (dev)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ dev ]
  workflow_dispatch:
    inputs:
      fork_repo:
        description: 'Fork repository (e.g., tokk-nv/jetson-containers)'
        required: false
        type: string
      fork_branch:
        description: 'Branch from fork to test (e.g., dev)'
        required: false
        type: string
        default: 'dev'

jobs:
  test-nerfstudio-orin:
    runs-on: [self-hosted, linux, arm64, jetson, orin]
    name: "Package Build Test (Orin)"

    steps:
      - name: Pre-checkout cleanup
        run: |
          echo "=== Pre-checkout Cleanup ==="
          echo "Cleaning up any permission-restricted directories before checkout..."

          # Clean up directories that may have restricted permissions
          # Don't remove .git directory - let checkout handle it
          rm -rf /home/jetson/actions-runner/_work/jetson-containers/jetson-containers/data || echo "Data cleanup failed"
          rm -rf /home/jetson/actions-runner/_work/jetson-containers/jetson-containers/logs || echo "Logs cleanup failed"

          # Reset permissions on work directory
          chown -R jetson:jetson /home/jetson/actions-runner/_work/jetson-containers/ || echo "Permission reset failed"
          chmod -R 755 /home/jetson/actions-runner/_work/jetson-containers/jetson-containers/ 2>/dev/null || echo "Permission change failed"

          echo "Pre-checkout cleanup completed"

      - name: Checkout PR or Fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event_name == 'workflow_dispatch' && inputs.fork_repo != '' && inputs.fork_repo || github.repository }}
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.fork_branch != '' && inputs.fork_branch || github.ref }}
          clean: false

      - name: Display system info
        run: |
          echo "=== Jetson Orin System Info ==="
          echo "Hello from $HOSTNAME running on Jetson Orin!"
          uname -a
          nvidia-smi || echo "No nvidia-smi (Jetson usually)"
          echo "GPU Memory:"
          cat /proc/device-tree/compatible || echo "Device tree info not available"

      - name: Record environment variables
        run: |
          echo "=== Complete Environment Variables ==="
          echo "All environment variables:"
          env | sort
          echo ""
          echo "=== Key Environment Variables ==="
          echo "PATH: $PATH"
          echo "HOME: $HOME"
          echo "USER: $USER"
          echo "PWD: $PWD"
          echo "SHELL: $SHELL"
          echo "LANG: $LANG"
          echo "LC_ALL: $LC_ALL"
          echo "TZ: $TZ"
          echo "GITHUB_* variables:"
          env | grep "^GITHUB_" | sort
          echo ""
          echo "=== System Information ==="
          echo "Docker version:"
          docker --version || echo "Docker not available"
          echo "Python version:"
          python3 --version || echo "Python3 not available"
          echo "CUDA version:"
          nvcc --version || echo "NVCC not available"
          echo "Available disk space:"
          df -h
          echo "Memory usage:"
          free -h
          echo "CPU info:"
          lscpu | head -20 || echo "lscpu not available"
          echo "GPU info:"
          nvidia-smi || echo "nvidia-smi not available"

      - name: Clean environment for fresh build
        run: |
          echo "=== Cleaning Environment ==="
          echo "Removing any existing Docker containers and images..."
          docker system prune -f || echo "Docker cleanup failed"
          echo "Clearing any cached build artifacts..."
          rm -rf ~/.cache/* || echo "Cache cleanup failed"

          # Clean up any permission-restricted directories
          echo "Cleaning up permission-restricted directories..."
          rm -rf /home/jetson/actions-runner/_work/jetson-containers/jetson-containers/data || echo "Data cleanup failed"
          rm -rf /home/jetson/actions-runner/_work/jetson-containers/jetson-containers/logs || echo "Logs cleanup failed"

          # Reset permissions on work directory
          chown -R jetson:jetson /home/jetson/actions-runner/_work/jetson-containers/ || echo "Permission reset failed"

          echo "Environment cleaned for fresh build"

      - name: Show git repository state
        run: |
          echo "=== Git Status ==="
          git status
          echo ""
          echo "=== Recent Git History (last 10 commits) ==="
          git log --oneline -10

      - name: Test build nerfstudio package on Orin
        id: nerfstudio-test
        run: |
          echo "=== Testing nerfstudio package on Jetson Orin ==="
          chmod +x ./build.sh

          # Stage 1: List packages
          echo "üîç STAGE 1: Listing available packages..."
          if ./build.sh --list-packages; then
            echo "‚úÖ STAGE 1 PASSED: Package listing successful"
            echo "stage1=passed" >> $GITHUB_OUTPUT
          else
            echo "‚ùå STAGE 1 FAILED: Package listing failed"
            echo "stage1=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Stage 2: Build nerfstudio package
          echo ""
          echo "üî® STAGE 2: Building nerfstudio package..."
          echo "Command: ./build.sh --build-flags='--no-cache' --no-github-api nerfstudio"

          # Capture build output with timestamps
          if timeout 7200 ./build.sh --build-flags="--no-cache" --no-github-api nerfstudio 2>&1 | tee build.log; then
            # Check if the build actually succeeded by looking for failure indicators
            if grep -i "failed building\|build failed\|error.*failed" build.log; then
              echo "‚ùå STAGE 2 FAILED: Build script completed but build failed"
              echo "stage2=failed" >> $GITHUB_OUTPUT
              echo "build_status=failed" >> $GITHUB_OUTPUT

              # Analyze failure using log structure
              echo ""
              echo "üîç BUILD FAILURE ANALYSIS:"
              echo "Last 50 lines of build log:"
              tail -50 build.log || echo "No build log available"

              # Initialize failure detection variables
              FAILURE_STAGE="unknown"
              FAILURE_COMPONENT="unknown"
              FAILURE_PHASE="unknown"

              # Check if logs directory exists and find the latest session
              if [ -d "logs" ]; then
                echo ""
                echo "üìÅ Analyzing structured log files..."

                # Find the latest log session
                LATEST_SESSION=$(ls -t logs/ | head -1)
                if [ -n "$LATEST_SESSION" ]; then
                  echo "Latest log session: $LATEST_SESSION"
                  cd "logs/$LATEST_SESSION"

                  # Check build phase logs
                  if [ -d "build" ]; then
                    echo "üî® Analyzing build phase logs..."

                    # Find the last build log file (highest numbered)
                    LAST_BUILD_LOG=$(ls build/*.txt 2>/dev/null | sort -V | tail -1)
                    if [ -n "$LAST_BUILD_LOG" ]; then
                      echo "Last build log: $LAST_BUILD_LOG"

                      # Extract package name from log filename (format: XXoX_package_name.txt)
                      PACKAGE_NAME=$(basename "$LAST_BUILD_LOG" .txt | sed 's/^[0-9]*o[0-9]*_//')
                      echo "Failed package: $PACKAGE_NAME"

                      # Check for errors in the last build log
                      if grep -i "failed building\|build failed\|error.*failed\|exit status.*1" "$LAST_BUILD_LOG"; then
                        FAILURE_PHASE="build"
                        FAILURE_STAGE="build"
                        FAILURE_COMPONENT="$PACKAGE_NAME"
                        echo "‚ùå Build failure detected in package: $PACKAGE_NAME"
                      fi
                    fi
                  fi

                  # Check test phase logs
                  if [ -d "test" ]; then
                    echo "üß™ Analyzing test phase logs..."

                    # Find the last test log file
                    LAST_TEST_LOG=$(ls test/*.txt 2>/dev/null | sort -V | tail -1)
                    if [ -n "$LAST_TEST_LOG" ]; then
                      echo "Last test log: $LAST_TEST_LOG"

                      # Extract package name from test log filename
                      TEST_PACKAGE_NAME=$(basename "$LAST_TEST_LOG" .txt | sed 's/^[0-9]*-[0-9]*_//' | sed 's/_test\.sh$//')
                      echo "Failed test package: $TEST_PACKAGE_NAME"

                      # Check for errors in the last test log
                      if grep -i "traceback\|error\|exception\|failed\|exit status.*1\|returned non-zero exit status" "$LAST_TEST_LOG"; then
                        FAILURE_PHASE="test"
                        FAILURE_STAGE="test"
                        FAILURE_COMPONENT="$TEST_PACKAGE_NAME"
                        echo "‚ùå Test failure detected in package: $TEST_PACKAGE_NAME"
                      fi
                    fi
                  fi

                  # Go back to original directory
                  cd - > /dev/null
                else
                  echo "No log sessions found"
                fi
              else
                echo "No logs directory found, analyzing build.log only"
              fi

              # Fallback: analyze build.log for general patterns
              if [ "$FAILURE_STAGE" = "unknown" ]; then
                echo "üîç Fallback analysis from build.log..."

                if grep -i "timeout" build.log; then
                  FAILURE_PHASE="build"
                  FAILURE_STAGE="timeout"
                  FAILURE_COMPONENT="build"
                  echo "‚è∞ Timeout detected"
                elif grep -i "docker" build.log | grep -i "error\|failed"; then
                  FAILURE_PHASE="build"
                  FAILURE_STAGE="docker"
                  FAILURE_COMPONENT="container"
                  echo "‚ùå Docker container failure detected"
                elif grep -i "error\|failed" build.log; then
                  FAILURE_PHASE="build"
                  FAILURE_STAGE="build"
                  FAILURE_COMPONENT="general"
                  echo "‚ùå General build failure detected"
                else
                  FAILURE_PHASE="build"
                  FAILURE_STAGE="build"
                  FAILURE_COMPONENT="unknown"
                  echo "‚ùå Build failed for unknown reason"
                fi
              fi

              # Set failure details for output
              echo "failure_phase=$FAILURE_PHASE" >> $GITHUB_OUTPUT
              echo "failure_stage=$FAILURE_STAGE" >> $GITHUB_OUTPUT
              echo "failure_component=$FAILURE_COMPONENT" >> $GITHUB_OUTPUT

            else
              echo "‚úÖ STAGE 2 PASSED: nerfstudio package build successful"
              echo "stage2=passed" >> $GITHUB_OUTPUT
              echo "build_status=success" >> $GITHUB_OUTPUT
            fi
          else
            BUILD_EXIT_CODE=$?
            echo "‚ùå STAGE 2 FAILED: nerfstudio package build failed with exit code $BUILD_EXIT_CODE"
            echo "stage2=failed" >> $GITHUB_OUTPUT
            echo "build_status=failed" >> $GITHUB_OUTPUT
            exit $BUILD_EXIT_CODE
          fi

          echo "‚úÖ nerfstudio package test completed successfully on Orin!"

      - name: Analyze build results
        if: always()
        run: |
          echo "=== Build Analysis ==="
          echo "Stage 1 (Package Listing): ${{ steps.nerfstudio-test.outputs.stage1 }}"
          echo "Stage 2 (Package Build): ${{ steps.nerfstudio-test.outputs.stage2 }}"
          echo "Overall Build Status: ${{ steps.nerfstudio-test.outputs.build_status }}"

          if [ "${{ steps.nerfstudio-test.outputs.build_status }}" = "success" ]; then
            echo "üéâ SUCCESS: nerfstudio package built successfully on Jetson Orin"
          else
            echo "üí• FAILURE: nerfstudio package build failed on Jetson Orin"
            echo "Check the build log above for detailed error information"
          fi

      - name: Test build results
        run: |
          echo "=== nerfstudio Build Test Results Summary ==="
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR from: ${{ github.event.pull_request.head.repo.full_name }}"
            echo "Branch: ${{ github.head_ref }}"
            echo "Commit: ${{ github.event.pull_request.head.sha }}"
          else
            echo "Manual run from: ${{ github.repository }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
          fi
          echo ""
          echo "Hardware: Jetson Orin"
          echo "Package: nerfstudio"
          echo "Stage 1 (Package Listing): ${{ steps.nerfstudio-test.outputs.stage1 }}"
          echo "Stage 2 (Package Build): ${{ steps.nerfstudio-test.outputs.stage2 }}"
          echo "Overall Status: ${{ steps.nerfstudio-test.outputs.build_status }}"

          if [ "${{ steps.nerfstudio-test.outputs.build_status }}" = "success" ]; then
            echo "üéâ RESULT: nerfstudio package SUCCESS on Jetson Orin"
          else
            echo "üí• RESULT: nerfstudio package FAILED on Jetson Orin"
            echo "Failure Phase: ${{ steps.nerfstudio-test.outputs.failure_phase }}"
            echo "Failure Stage: ${{ steps.nerfstudio-test.outputs.failure_stage }}"
            echo "Failure Component: ${{ steps.nerfstudio-test.outputs.failure_component }}"
            echo ""
            echo "‚ùå nerfstudio Package Test (Orin) - FAILED in STAGE: ${{ steps.nerfstudio-test.outputs.failure_phase }} > ${{ steps.nerfstudio-test.outputs.failure_stage }} > ${{ steps.nerfstudio-test.outputs.failure_component }}"
            echo "Check build logs above for detailed failure information"
          fi
